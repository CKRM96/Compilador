/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mx.edu.itesca.compilador;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author diego
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {

        initComponents();

    }

    private void writeTableToSheet(javax.swing.JTable table, Sheet sheet) {
        int rowCount = table.getRowCount();
        int colCount = table.getColumnCount();

        // Limpia contenido anterior (opcional, si no quieres sobrescribir puedes omitir esto)
        for (int i = sheet.getLastRowNum(); i >= 0; i--) {
            sheet.removeRow(sheet.getRow(i));
        }

        // Agregar encabezados
        Row headerRow = sheet.createRow(0);
        for (int c = 0; c < colCount; c++) {
            Cell cell = headerRow.createCell(c);
            cell.setCellValue(table.getColumnName(c));
        }

        // Agregar filas
        for (int r = 0; r < rowCount; r++) {
            Row row = sheet.createRow(r + 1);
            for (int c = 0; c < colCount; c++) {
                Cell cell = row.createCell(c);
                Object value = table.getValueAt(r, c);
                cell.setCellValue(value != null ? value.toString() : "");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtCodigo = new javax.swing.JTextArea();
        btnCargar = new javax.swing.JButton();
        btnCompilar = new javax.swing.JButton();
        btnGEXcel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtCodigo.setColumns(20);
        txtCodigo.setRows(5);
        jScrollPane1.setViewportView(txtCodigo);

        btnCargar.setText("Cargar");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        btnCompilar.setText("Compilar");
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompilarActionPerformed(evt);
            }
        });

        btnGEXcel.setText("G. Excel");
        btnGEXcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGEXcelActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "Lexema", "Línea"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel1.setText("Errores:");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "Descripción", "Lexema", "Tipo de error", "Linea", "Columna"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        jLabel2.setText("Contadores");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Errores", "0"},
                {"Identificadores", "0"},
                {"Comentario", "0"},
                {"Palabras reservada", "0"},
                {"Constantes de cadena", "0"},
                {"Constante numérica", "0"},
                {"Constante real", "0"},
                {"Constante exponencial", "0"},
                {"Constante booleana", "0"},
                {"Constante nula", "0"},
                {"Operador postfix", "0"},
                {"Operador lógico binario", "0"},
                {"Operador de control", "0"},
                {"Operador matemático", "0"},
                {"Operador exponente", "0"},
                {"Operador de turno", "0"},
                {"Operador relacional", "0"},
                {"sin igualdad de conv", "0"},
                {"Operadores logicos", "0"},
                {"Operador ternario", "0"},
                {"Operadores de asignación", "0"},
                {"De agrupamiento", "0"}
            },
            new String [] {
                "Tipo", "Cantidad"
            }
        ));
        jScrollPane4.setViewportView(jTable3);

        jLabel3.setText("Tokens");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35)
                                        .addComponent(btnCompilar)
                                        .addGap(47, 47, 47)
                                        .addComponent(btnGEXcel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28))
                                    .addComponent(jLabel3))))))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCargar)
                            .addComponent(btnCompilar)
                            .addComponent(btnGEXcel))
                        .addGap(16, 16, 16)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGEXcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGEXcelActionPerformed
        try {
            // Cargar plantilla con FileInputStream (ruta relativa desde raíz del proyecto)

            InputStream is = getClass().getResourceAsStream("/Excel/Plantilla de lexico 2024-1.xlsx");
            if (is == null) {
                throw new FileNotFoundException("No se encontró la plantilla en los recursos.");
            }
            Workbook workbook = new XSSFWorkbook(is);
            // Acceder a hojas por nombre
            Sheet sheetTokens = workbook.getSheet("TOKENS");
            Sheet sheetErrores = workbook.getSheet("Errores");
            Sheet sheetContadores = workbook.getSheet("CONTADORES");

            if (sheetTokens == null || sheetErrores == null || sheetContadores == null) {
                throw new IllegalArgumentException("Una o más hojas no existen en la plantilla.");
            }

            // Escribir datos desde jTable1 (TOKENS)
            writeTableToSheet(jTable1, sheetTokens);

            // Escribir datos desde jTable2 (Errores)
            writeTableToSheet(jTable2, sheetErrores);

            // Escribir datos desde jTable3 (Contadores)
            writeTableToSheet(jTable3, sheetContadores);

            // Guardar como nuevo archivo
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Guardar Excel generado");
            int seleccion = fileChooser.showSaveDialog(this);

            if (seleccion == JFileChooser.APPROVE_OPTION) {
                File archivoDestino = fileChooser.getSelectedFile();
                if (!archivoDestino.getName().endsWith(".xlsx")) {
                    archivoDestino = new File(archivoDestino.getAbsolutePath() + ".xlsx");
                }

                FileOutputStream fos = new FileOutputStream(archivoDestino);
                workbook.write(fos);
                fos.close();
                workbook.close();

                javax.swing.JOptionPane.showMessageDialog(this, "Archivo Excel generado exitosamente.");
            }

        } catch (IOException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Error al generar Excel: " + e.getMessage());
        }
    }//GEN-LAST:event_btnGEXcelActionPerformed
    File archivo;
    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        if (txtCodigo.getText() != null) {
            txtCodigo.setText("");
        }
        JFileChooser selectorArchivos = new JFileChooser();
        selectorArchivos.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        if (selectorArchivos.showOpenDialog(this) == 0) {
            archivo = selectorArchivos.getSelectedFile();
        }
        try {
            FileReader fr = new FileReader(archivo);
            BufferedReader leer = new BufferedReader(fr);
            String texto = leer.readLine();
            while (texto != null) {
                txtCodigo.append(texto + '\n');
                texto = leer.readLine();
            }
        } catch (FileNotFoundException ex) {

        } catch (IOException ex) {

        }
    }//GEN-LAST:event_btnCargarActionPerformed

    private void btnCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompilarActionPerformed
        Matrices m = new Matrices();
        int[][] matriz = m.miMatriz();
        String[] expresiones = m.miColumna();

        // Llamar a la clase Tokens con lo necesario
        Tokens t = new Tokens(matriz, archivo, jTable1, jTable2, jTable3, expresiones);
        if (archivo == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Primero carga un archivo.");
            return;
        }
    }//GEN-LAST:event_btnCompilarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnCompilar;
    private javax.swing.JButton btnGEXcel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextArea txtCodigo;
    // End of variables declaration//GEN-END:variables
}
